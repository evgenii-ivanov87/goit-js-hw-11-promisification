{"version":3,"sources":["webpack:///./js/promisification.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","loger","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"+KACMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACTD,EAAQF,KACVA,OAOFI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAIb,SAAQ,SAACC,GACKW,EAASE,KAAI,SAAAC,GAC1BA,EAAKN,OAASI,GACdZ,EAAQc,UAOlBC,EAAQ,SAAAC,GAAY,OAAIZ,QAAQa,MAAMD,IAK5CN,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKS,GACrCL,EAAgBH,EAAO,OAAOD,KAAKS,GAGnC,IAIMG,EAAkB,SAACC,GACrB,OAAO,IAAIpB,SAAQ,SAACC,EAASoB,GACzB,IAN2BC,EAAKC,EAM1BzB,GANqBwB,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAO9CpB,YAAW,WACYsB,KAAKE,SAAW,GAG/BzB,EAAQmB,EAAYO,GAAI7B,GAGxBuB,EAAOD,EAAYO,MAGxB7B,OAMH8B,EAAa,SAACD,EAAIvB,GACdC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGEyB,EAAW,SAAAF,GACbtB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAMZR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAClCZ,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAClCZ,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAClCZ,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAIlCZ,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.d215073ce926e77873aa.js","sourcesContent":["\r\nconst delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n          resolve(ms)\r\n      },ms)\r\n  })\r\n};\r\n\r\n\r\n\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user => {\r\n            if (user.name === userName) {\r\n                resolve(user)\r\n            }           \r\n        })\r\n    })\r\n}\r\n\r\n\r\nconst loger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', loger);\r\ntoggleUserState(users, 'Lux', loger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(loger);\r\ntoggleUserState(users, 'Lux').then(loger);\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve(transaction.id, delay);\r\n      \r\n            } else {\r\n                reject(transaction.id)\r\n      \r\n            }\r\n        }, delay);\r\n\r\n               \r\n    })\r\n    \r\n};\r\n  const logSuccess = (id, time) => {\r\n            console.log(`Transaction ${id} processed in ${time}ms`);\r\n        };\r\n\r\n        const logError = id => {\r\n            console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n        };\r\n\r\n/*\r\n * Работает так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}